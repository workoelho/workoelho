datasource db {
    url      = env("DATABASE_URL")
    provider = "sqlite"
}

generator client {
    provider = "prisma-client-js"
}

model Organization {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String

    sessions     Session[]
    users        User[]
    applications Application[]
    roles        Role[]
    related      Relation[]
    providers    Provider[]
    activity     Activity[]
    tags         Tag[]
    project      Project[]

    @@map("organizations")
}

model User {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    email     String   @unique
    name      String
    password  String
    level     String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    sessions    Session[]
    activity    Activity[]
    roles       Role[]
    actionables Actionable[]

    @@map("users")
}

model Session {
    id            String   @id @default(uuid())
    createdAt     DateTime @default(now())
    expiresAt     DateTime
    deviceId      String
    remoteAddress String
    userAgent     String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    userId Int
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Project {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    relators    Relator[]
    actionables Actionable[]
    taggables   Taggable[]

    @@map("projects")
}

model Application {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    roles       Role[]
    relatables  Relatable[]
    relators    Relator[]
    taggables   Taggable[]
    actionables Actionable[]

    @@map("applications")
}

model Role {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    userId Int
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

    applicationId Int
    application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

    @@map("roles")
}

model Provider {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   @unique
    url       String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    relatables  Relatable[]
    taggables   Taggable[]
    actionables Actionable[]

    @@map("providers")
}

model Relation {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    url       String?

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    relatorId Int
    relator   Relator @relation(fields: [relatorId], references: [id], onDelete: Cascade)

    relatableId Int
    relatable   Relatable @relation(fields: [relatableId], references: [id], onDelete: Cascade)

    actionable Actionable[]

    @@map("relations")
}

model Relator {
    id Int @id @default(autoincrement())

    applicationId Int?
    application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)

    projectId Int?
    project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

    relations Relation[]

    @@map("relators")
}

// Relatable is a polymorphic proxy for resources that are related to other resources.
model Relatable {
    id Int @id @default(autoincrement())

    applicationId Int?
    application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)

    providerId Int?
    provider   Provider? @relation(fields: [providerId], references: [id])

    relations Relation[]

    @@map("relatables")
}

model Tag {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    label     String
    value     String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    taggableId Int
    taggable   Taggable @relation(fields: [taggableId], references: [id])

    actionables Actionable[]

    @@map("tags")
}

// Taggable is a polynmorphic proxy for things that can have tags.
model Taggable {
    id Int @id @default(autoincrement())

    tags Tag[]

    applicationId Int?
    application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)

    providerId Int?
    provider   Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)

    projectId Int?
    project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@map("taggables")
}

// Actionable is a polymorphic proxy for things that can be acted upon.
model Actionable {
    id Int @id @default(autoincrement())

    activity Activity[]

    applicationId Int?
    application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)

    providerId Int?
    provider   Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)

    tagId Int?
    tag   Tag? @relation(fields: [tagId], references: [id], onDelete: Cascade)

    projectId Int?
    project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

    userId Int?
    user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    relationId Int?
    relation   Relation? @relation(fields: [relationId], references: [id], onDelete: Cascade)

    @@map("actionables")
}

model Activity {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    name      String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    userId Int
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

    actionableId Int?
    actionable   Actionable? @relation(fields: [actionableId], references: [id], onDelete: Cascade)

    @@map("activity")
}

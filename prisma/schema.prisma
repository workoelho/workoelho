datasource db {
    url      = env("DATABASE_URL")
    provider = "sqlite"
}

generator client {
    provider = "prisma-client-js"
}

model Organization {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   @unique

    activity     Activity[]
    applications Application[]
    providers    Provider[]
    roles        Role[]
    services     Service[]
    sessions     Session[]
    tags         Tag[]
    users        User[]

    @@map("organizations")
}

model User {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    email     String   @unique
    name      String
    password  String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])

    sessions Session[]
    activity Activity[]
    roles    Role[]

    @@map("users")
}

model Session {
    id            String   @id @default(uuid())
    createdAt     DateTime @default(now())
    expiresAt     DateTime
    deviceId      String
    remoteAddress String
    userAgent     String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])

    userId Int
    user   User @relation(fields: [userId], references: [id])

    @@map("sessions")
}

model Application {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   @unique

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])

    services Service[]
    roles    Role[]

    @@map("applications")
}

model Role {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])

    userId Int
    user   User @relation(fields: [userId], references: [id])

    applicationId Int
    application   Application @relation(fields: [applicationId], references: [id])

    @@map("roles")
}

model Provider {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   @unique
    url       String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])

    services Service[]

    @@map("providers")
}

model Service {
    id                   Int      @id @default(autoincrement())
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    name                 String
    estimatedMonthlyCost Float

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])

    providerId Int
    provider   Provider @relation(fields: [providerId], references: [id])

    applicationId Int
    application   Application @relation(fields: [applicationId], references: [id])

    @@map("services")
}

model Tag {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    label     String
    value     String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])

    objectType String
    objectId   Int

    @@index([objectType, objectId])
    @@map("tags")
}

model Activity {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    name      String

    organizationId Int
    organization   Organization @relation(fields: [organizationId], references: [id])

    objectType String
    objectId   Int

    subjectId Int
    subject   User @relation(fields: [subjectId], references: [id])

    @@index([objectType, objectId])
    @@map("activity")
}
